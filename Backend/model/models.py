from pydantic import BaseModel, EmailStr
from datetime import datetime
from typing import Optional, List

# --------------------- User Models ---------------------
class User(BaseModel):
    email: EmailStr
    username: str
    password: str
    role: str  # "professor" or "student"

class UserLogin(BaseModel):
    email: EmailStr
    password: str

class UserResponse(BaseModel):
    email: EmailStr
    username: str
    role: str

# --------------------- Appointment Models ---------------------
class Appointment(BaseModel):
    student_name: str
    student_email: EmailStr
    course_code: str
    professor_name: str
    appointment_date: datetime

class AppointmentResponse(Appointment):
    id: str

# --------------------- Class Models ---------------------
class Class(BaseModel):
    course_name: str
    professor_name: str
    course_description: str
    course_code: Optional[str] = None  # Generated by backend

class ClassResponse(Class):
    id: str
    course_code: str  # Ensures it's present in response

# --------------------- Enrollment Models ---------------------
class Enrollment(BaseModel):
    user_email: EmailStr
    course_code: str
    role: str  # "professor" or "student"

class EnrollmentResponse(Enrollment):
    id: Optional[str]

# --------------------- Avalibility Models ---------------------
class Avaliable(BaseModel):
    course_code: str
    time: List[str]  # Now a list of times

class AvaliableResponse(Avaliable):
    id: Optional[str]